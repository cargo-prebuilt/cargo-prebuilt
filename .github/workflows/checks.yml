name: Rust Checks
### Name: Rust Checks
### Author: harmless-tech
### Version: audit-1.0.0
### Git Repo: https://github.com/harmless-tech/rust-github-actions

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  feature-set: '--no-default-features --features native,bright-color,indexes,security'
  hack-group: '--group-features rustls,rustls-native-certs,native,vendored-openssl --group-features bright-color,dull-color'
  CARGO_TERM_COLOR: never
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  fmt-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install nightly
        run: rustup toolchain install nightly --allow-downgrade -c rustfmt
      - name: Rustfmt Check
        run: |
          set -o pipefail
          cargo +nightly fmt --check 2>&1 | tee .step-data.txt
      - name: Put into summary (success)
        if: success()
        run: echo "Success" >> $GITHUB_STEP_SUMMARY
      - name: Put into summary (failure)
        if: failure()
        run: |
          echo "Failed!" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`shell" >> $GITHUB_STEP_SUMMARY
          cat .step-data.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  clippy:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target
          key: ${{ runner.os }}-clippy-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Update Rust
        run: rustup update
      - name: Rust Version
        run: rustc --version
      - name: Clippy Check
        shell: bash
        run: |
          set -o pipefail
          cargo clippy --all-targets --verbose --workspace --locked -- -D warnings 2>&1 | tee .step-data.txt
          cargo clippy --all-targets --verbose --workspace --locked ${{ env.feature-set }} -- -D warnings 2>&1 | tee .step-data.txt
      - name: Put into summary (success)
        if: success()
        shell: bash
        run: echo "Success" >> $GITHUB_STEP_SUMMARY
      - name: Put into summary (failure)
        if: failure()
        shell: bash
        run: |
          echo "Failed!" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`shell" >> $GITHUB_STEP_SUMMARY
          cat .step-data.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  cargo-hack:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target
          key: ${{ runner.os }}-cargo-hack-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      - name: Update Rust
        run: rustup update
      - name: Rust Version
        run: rustc --version
      - uses: cargo-prebuilt/cargo-prebuilt-action@v1
        with:
          tools: cargo-hack
      - name: Hack Check (each-feature)
        shell: bash
        run: |
          set -o pipefail
          cargo hack check --each-feature --no-dev-deps --verbose --workspace --locked 2>&1 | tee .step-data.txt
      - name: Hack Check (feature-powerset)
        shell: bash
        run: |
          set -o pipefail
          cargo hack check --feature-powerset ${{ env.hack-group }} --no-dev-deps --verbose --workspace --locked 2>&1 | tee .step-data.txt
      - name: Put into summary (success)
        if: success()
        shell: bash
        run: echo "Success" >> $GITHUB_STEP_SUMMARY
      - name: Put into summary (failure)
        if: failure()
        shell: bash
        run: |
          echo "Failed!" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`shell" >> $GITHUB_STEP_SUMMARY
          cat .step-data.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
